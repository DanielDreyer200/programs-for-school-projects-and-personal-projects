/*************************************************************************
 ** File:    Game.cpp
 ** Project: 202 Project 4, fall 2024
 ** Author:  Daniel Dreyer
 ** Section: 35
 ** E-Malil: ddreyer1@umbc.edu
 **
 ** Discription: this file contains the main programing of the project
 ** the file does multiple things, more spacifically it will load the given
 ** file name, ask the user for there name and places it in as hero. it then
 ** chooses a random weapon to give to the user. it then askes user to choose
 ** options between look (will display the description of the area, including
 ** the monster in it and avalible directions), move (allows user to move in a
 ** given area, only actually moving when a correct direction is chosen,
 ** desplaying look when done), attack (allows user to attack monster if there
 ** is one, then comenses a battle till he monster or player or both die),
 ** improve weapon(converts exp from battle to damage if player has enough
 ** exp), check stats (desplays stats of player), and quit which exits the
 ** program.
 **
 *************************************************************************/

//includes the game. h file to be accessed
#include "Game.h"

//ovverloaded constructor setting varriables to appropriate values
Game::Game(string filename){

  //sets varibles to nullptr
  m_myHero = nullptr;
  m_curEnemy = nullptr;
  //sets given file to m_filename
  m_filename = filename;
  //makes the start area the current area
  m_curArea = START_AREA;
}

//deconstructor deallocates all variables
Game::~Game(){

  //deletes variable for enemy and hero
  delete m_myHero;
  delete m_curEnemy;

  //creates size of map vector
  int x = m_myMap.size();

  //goes through map vector and deletes each value in it
  for(int i =0; i<x; i++){

    delete m_myMap[i];

  }
  
}
//loads the map into the area file
void Game::LoadMap(){

  //creates 2 ifstreams
  ifstream inputstream, inputstreamcount;

  //opems the given file twice into the 2 variables
  inputstream.open(m_filename);
  inputstreamcount.open(m_filename);

  //value to go through each line and place it in a variable
  string x;  

  //variables to place each section of the file into
  string id;
  string name;
  string desc;
  string n;
  string e;
  string s;
  string w;
 
  //itterates through one of the file variables by line and then gets the
  //value for each vsection and places it into area vector based on its
  //details in total
  while(getline(inputstreamcount,x)){

    //sets each variable to a portion in the file that is split by its
    //delimiter
    getline(inputstream, id, DELIMITER);
    getline(inputstream, name, DELIMITER);
    getline(inputstream, desc, DELIMITER);
    getline(inputstream, n, DELIMITER);
    getline(inputstream, e, DELIMITER);
    getline(inputstream, s, DELIMITER);
    getline(inputstream, w, DELIMITER);

    //places akk variables into area file
    Area* map = new Area(stoi(id), name, desc, stoi(n), stoi(e), stoi(s), stoi(w));

    //places that area in the vector
    m_myMap.push_back(map);

    }

  //closes both files
  inputstream.close();
  inputstreamcount.close();

}

//creates the hero for user given the name by user and giving a
//random weapon
void Game::HeroCreation(){

  //variable for name
  string m_name;

  //sets title of the game
  cout<<"Silent Hill 2 Remanke"<<endl;
  //asks for name from user and places it in m_name
  cout<<"name: ";
  getline(cin, m_name);  

  //places the name and hero health into hero file to create hero
  m_myHero = new Hero(m_name, HERO_HEALTH);

  //creates a random weapon and tells user
  cout<<"You start with a "<<m_myHero->GetWeaponName()<<"!"<<endl<<endl;

  //sets the exp to 0 for starting values
  m_myHero->SetExperience(0);

  
}

//desplays the area to user along with the monster and the avalible
//directions
void Game::Look(){

  //takes the maps current area in the vector and desplays its contents
  //to user 
  m_myMap[m_curArea]->PrintArea();

  //if current enemy exists get its discription and display it to user
  if(m_curEnemy != nullptr){

    cout<<m_curEnemy->GetDesc()<<endl;

    //if no enemy thell user its peaceful
  }else{

    cout<<"It is peaceful here."<<endl;

  }


}

//starts the game by loading map, herocreation, randomenemy, look and action
void Game::StartGame(){

  LoadMap();
  HeroCreation();
  RandomEnemy();
  Look();
  Action();
  

}

//shows the menu for the program to user allowing then to make a choice
//on what they would like to do
void Game::Action(){

  //sets values to 0
  int i = 0;
  int option = 0;

  
  //while i is 0 itterate though the commands
  while (i==0){


    //switch statment to show each value form the user to the value
    //they chose
    switch(option){


      //desplays menu to user and places there choice to option
    case 0:{

      cout<<"What would you like to do?\n1. Look\n2. Move\n3. Attack Enemy\n4. Improve Weapon\n5. Check Stats\n6. Quit"<<endl;

      cin>>option;

      break;

    }

      //if 1 is chosen call Look(), set option to 0
    case 1:{

      Look();

      option =0;
      break;

    }
      //if 2 call Move() set option to 0
    case 2:{

      Move();

      option = 0;

      break;


    }
      //if 3 determine if enemy exists, if does call Attack() else desplay no monster exists, also if c becomes false set i =1, set option to 0
    case 3:{

      //bool to set Attack to true
      bool c = true;

      //if statment for checking if enemy exists
      if(m_curEnemy != nullptr){

	//calls Attack()
	c = Attack();

	//desplays no monsters
      }else{

	cout<<"no monster in this area"<<endl;

      }
      //if c is false i =1
      if(c == false){

	i =1;

      }
      

      //sets option back to 0
      option = 0;

      break;


    }
      //if 4 is chosen  call ImproveWeapon() and sets option to 0
    case 4:{

      ImproveWeapon();

      option = 0;

      break;

    }
      //if 5 is chosen call Stats() set options to 0
    case 5:{

      Stats();

      option = 0;

      break;

    }
      //if 6 is chosen set i to 1 
    case 6:{

      i =1;

      
      break;
    }
      //if any other value is chosen tell user to try again, sets
      //option to 0
    default:{


      cout<<"Wrong option please try again"<<endl;
      option =0;

      
    }

    }

  }
  //tells user thanks for playing
  cout<<"Thank you for playing Silent Hill 2 Remake"<<endl;

}

//creates a 25% chance for each enemy with 1 of the options beeing no enemy
void Game::RandomEnemy(){

  //creates random variable between 0-3
  int v = rand() % 4;

  //deletes current enemy
  delete m_curEnemy;

  //creates creeper if v =0
  if(v == 0){

    m_curEnemy = new Creeper(CREEPER_NAME, CREEPER_HEALTH, CREEPER_DAMAGE, CREEPER_DESC);

    //creates mandarin if v= 1
  }else if(v == 1){

    m_curEnemy = new Mandarin(MANDARIN_NAME, MANDARIN_HEALTH, MANDARIN_DAMAGE, MANDARIN_DESC);

    //creates mannequin if v=2
  }else if(v == 2){

    m_curEnemy = new Mannequin(MANNEQUIN_NAME, MANNEQUIN_HEALTH, MANNEQUIN_DAMAGE, MANNEQUIN_DESC);

    //it does not create any enemy if any number is chosen (aka 3)
  }else{

    m_curEnemy = nullptr;
    
  }
  
  

}

//improves weapon damage by 1 if the user has 3 exp or more, then gets rid
//of there exp, othherwise desplay a messagre to tell the user
void Game::ImproveWeapon(){


  //exp varible is from the heros current exp
  int exp = m_myHero->GetExperience();

  //if exp is less then cost desplay message
  if(exp < COST_IMPROVEMENT){

    cout<<"cant not enough experience (3 experience  = +1 Damage)"<<endl;

    //otherwise send exp to ImproveWeapon() in hero
  }else{

    //creates a value for user to input
    int amount;

    //asks user for how many times they would like to  improve with max they can being 1 
    cout<<"how much woudl you like to improve your weapon? (max 1)"<<endl;

    cin>>amount;


    if(amount == 1){
    
      m_myHero->ImproveWeapon(exp);

      cout<<"you have improved your weapon by "<<amount<<" damage"<<endl;
    }else if(amount == 0){

      cout<<"you have not improved your weapon"<<endl;

    }else{

      cout<<"sorry that is not a valid amout (number must be either 0 or 1)"<<endl;

    }

  }


}

//allows user to move to a location that is allowed by the program,
//otherwise asks them to chose a different direction
void Game::Move(){

  //variabble for user choice
  char choice;

  //variable for i set to 1
  int i=1;

  //while i =1 loop through thw commands bellow
  while(i==1){

    //asks user to choose direction placing it in choice
    cout<<"Which direction? (N E S W)"<<endl;
    cin>>choice;

    //takes user choice and checks if the option is avalible in the current
    //area by using area file check direction placing the value gotten to area
    int area = m_myMap[m_curArea]->CheckDirection(choice);

    //if area = -1 desplay its the wrong direction
    if(area == -1){

    cout<<"Not a correct direction try again"<<endl;

    //otherwiser set the current area to area, set i to 2 call RandomEenmy()
    //and call Look()
    }else{
      m_curArea = area;

      i =2;
      
      RandomEnemy();
      Look();
    
    }

  }


}

//allows user to attack the monster, while aslo getting exp on a win,and
//ending the game on a loss
bool Game::Attack(){

  //bool values for the hero and enemy alive status
  bool HeroAlive = true;
  bool EnemyAlive = true;

  //values to be used, i being set to 0
  int i = 0;
  int choice;

  //while i = 0 ask the user what option theyd like to do, desplay the resaults untill a winner is made
    while(i == 0){

      //desplays options and places into choice
      cout<<"1. Punch Enemy\n2. Use "<<m_myHero->GetWeaponName()<<endl;

      cin >>choice;


      //if chice is 1, get the value for the enemy health - hero attack and
      //the hero health - enemy damge then set that value to the hero or
      //enemys health
      if( choice == 1){


	int y = m_curEnemy->GetHealth() - m_myHero->Attack();

	int x = m_myHero->GetHealth() - m_curEnemy->Attack();

	m_curEnemy->SetHealth(y);
	
	m_myHero->SetHealth(x);

       

	//if get the difference bettween enemy health - hero special attack
	//and the hero health - enemy attack, setting both values to the
	//health of hero and enemy
      }else if(choice == 2){


	int y = m_curEnemy->GetHealth() - m_myHero->SpecialAttack();


	int x = m_myHero->GetHealth() - m_curEnemy->Attack();

	m_curEnemy->SetHealth(y);

	m_myHero->SetHealth(x); 

      }


      //if both hero and enemy are less then 1 then hero alive is swt to
      //false and i = 0;
      if(m_myHero->GetHealth() <1 && m_curEnemy-> GetHealth() <1){

	HeroAlive =false;

	i=1;
	//if hero is less then 1 then hero alive is swt to
	//false and i = 0;
      }else if(m_myHero->GetHealth() < 1){

	HeroAlive = false;

	i=1;
	//if enemy health is less then 1 then delete enemy and set current
	//enemy to nullptr set i to 1 and add  cerrent exp to winning exp,
	//set that value to curent exp and and set enemyalive to false reset
	//hero health
      }else if(m_curEnemy->GetHealth() <1){

	cout<<"you have defeated the "<<m_curEnemy->GetName()<<"!"<<endl;

	cout<<"you have earned "<<EXPERIENCE_WIN<<" experience points."<<endl;

	//delete enemy
	delete m_curEnemy;

	//set enemy to nullptr
	m_curEnemy = nullptr;

	//set i to 1
	i=1;

	//set e to the heros cuerrent exp + exp win
	int e = m_myHero->GetExperience() + EXPERIENCE_WIN;

	//set e to hero current exp
	m_myHero->SetExperience(e);

	
	//set enemyalive to false
	EnemyAlive = false;

	//sets enemy health to begining health
	m_myHero->SetHealth(HERO_HEALTH);

	//return true
	return true;

      }
      //if process attack is false desplay death message and return false
      if(ProcessAttack(EnemyAlive, HeroAlive) == false){

	

	return false;

      }
      //despalys the current health and name of hero to user
      cout<<*m_myHero<<endl;
      //desplays the current health and name and damage of the monster
      cout<<*m_curEnemy<<endl;

      
    }


    //return true
    return true;


}

//desplays current stats to user
void Game::Stats(){

  //desplays cureent name, current health, current exp
  cout<<"Name: "<<m_myHero->GetName()<<endl;
  cout<<"Health: "<<m_myHero->GetHealth()<<endl;
  cout<<"Experience Points: "<<m_myHero->GetExperience()<<endl;


}

//processes the outcome of the battle, returning false if at anypoint the
//hero dies
bool Game::ProcessAttack(bool enemyAlive, bool alive){

  //if hero and enemy hp is bellow 1 makes alive false  and say mutual
  //distruction to user and returns false
  if((m_myHero ->GetHealth() <1) && (m_curEnemy ->GetHealth() <0)){

      alive  = false;

      cout<<"You defeated eachother at the same time!"<<endl;

      return false;
      

      //if the hero health onlyis less then 0, set alive to false and
      //return false
    }else if (m_myHero ->GetHealth() <1){

    cout<<"You have died, play again to try again!"<<endl;
    alive = false;
    
    return alive;


    //otherwise return true
  }else{

    return true;
    
  }
  
}
